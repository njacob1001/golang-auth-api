// Code generated by mockery v2.9.4. DO NOT EDIT.

package storagemocks

import (
	context "context"
	domain "rumm-api/internal/core/domain"

	mock "github.com/stretchr/testify/mock"

	security "rumm-api/kit/security"
)

// AccountRepository is an autogenerated mock type for the AccountRepository type
type AccountRepository struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: ctx, accIdentifier, password, filterByType
func (_m *AccountRepository) Authenticate(ctx context.Context, accIdentifier string, password string, filterByType string) (*security.TokenDetails, error) {
	ret := _m.Called(ctx, accIdentifier, password, filterByType)

	var r0 *security.TokenDetails
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *security.TokenDetails); ok {
		r0 = rf(ctx, accIdentifier, password, filterByType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*security.TokenDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, accIdentifier, password, filterByType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: ctx, account, profile, person
func (_m *AccountRepository) Create(ctx context.Context, account domain.Account, profile domain.Profile, person domain.Person) (*security.TokenDetails, error) {
	ret := _m.Called(ctx, account, profile, person)

	var r0 *security.TokenDetails
	if rf, ok := ret.Get(0).(func(context.Context, domain.Account, domain.Profile, domain.Person) *security.TokenDetails); ok {
		r0 = rf(ctx, account, profile, person)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*security.TokenDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Account, domain.Profile, domain.Person) error); ok {
		r1 = rf(ctx, account, profile, person)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IdentifyUser provides a mock function with given fields: ctx, accountID
func (_m *AccountRepository) IdentifyUser(ctx context.Context, accountID string) (domain.User, error) {
	ret := _m.Called(ctx, accountID)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.User); ok {
		r0 = rf(ctx, accountID)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, accessUuid
func (_m *AccountRepository) Logout(ctx context.Context, accessUuid string) error {
	ret := _m.Called(ctx, accessUuid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, accessUuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Refresh provides a mock function with given fields: ctx, token
func (_m *AccountRepository) Refresh(ctx context.Context, token string) (*security.TokenDetails, error) {
	ret := _m.Called(ctx, token)

	var r0 *security.TokenDetails
	if rf, ok := ret.Get(0).(func(context.Context, string) *security.TokenDetails); ok {
		r0 = rf(ctx, token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*security.TokenDetails)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateAccount provides a mock function with given fields: ctx, person
func (_m *AccountRepository) ValidateAccount(ctx context.Context, person domain.Account) error {
	ret := _m.Called(ctx, person)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Account) error); ok {
		r0 = rf(ctx, person)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateRegister provides a mock function with given fields: ctx, person
func (_m *AccountRepository) ValidateRegister(ctx context.Context, person domain.Person) error {
	ret := _m.Called(ctx, person)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Person) error); ok {
		r0 = rf(ctx, person)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
